Per la realizzazione del progetto abbiamo deciso di definire una lista concatenata semplice, e di utilizzarla per gestire le istruzioni associate al singolo task; la successione dei task è invece gestita tramite la struttura Queue (anch’essa lista concatenata semplice), che contiene semplicemente un puntatore al primo task che la compone. 
Inizialmente avevamo cominciato a implementare il progetto utilizzando
soltanto un puntatore alle istruzioni, ma andando avanti abbiamo capito che per un miglior funzionamento avevamo bisogno di avere una traccia del task che stavamo utilizzando.

Come algoritmo non-preemptive abbiamo scelto il FCFS,in cui i Task da schedulare vengono gestiti tramite code FIFO; perchè il più semplice da realizzare in termini implementativi; in esso si creano due nuove Queue, chiamate READY e BLOCKED; partendo dalla lista già fornita in input, questa viene gradualmente svuotata andando poi a riempire la ready; ogni volta che un task viene qui bloccato, finisce in lista blocked e viene poi sbloccato al momento opportuno.

Come algoritmo pre-emptive abbiamo invece scelto il round-robin, con un quanto di tempo uguale all'intero superiore dell'80%  della media tra le somme delle durate delle istruzioni e code di tipo FIFO. Anche qui vengono create due Queue, la blocked e la ready; inizialmente il task da mettere prima nella coda ready viene selezionato dalla lista dei task presi in input; successivamente si lavora istruzione per istruzione,  e i task già usati e non finiti per via del fatto che esauriscono il quanto di tempo a loro garantito vengono memorizzati una coda temporanea, e copiati in coda alla ready. Questo procedimento si è rivelato necessario perchè utilizzando semplicemente le funzioni già implementate, come la push e la pop, si incorreva in segmentation fault o in fastidiose copie di task già finiti.

Abbiamo utilizzato i semafori in modo da isolare la scelta del task e fare in modo che lo stesso thread che lo esegue lo finisca.

Mettendo a confronto i due algoritmi, il Round Robin risulta efficiente quando si hanno task di istruzioni corte e non bloccanti, che stiano dentro il quanto di tempo; altrimenti, vengono penalizzati i processi corti e costituiti da istruzioni non bloccanti, che potrebbero concludersi senza problemi e invece finiscono inutilmente in coda.

Analizzando i due algoritmi in esecuzione, si ottiene come tra FCFS e ROUND ROBIN ci sia un’evidente differenza di velocità: il secondo esegue con un aumento in percentuale del 20%.

Il tempo di esecuzione stimato per l'esecuzione di un file 47 secondi, eseguita su Ubuntu 18.04 (Intel I7 - 3632QM).
